const { Client, Databases } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

// Configuration Appwrite
const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);

const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
const COLLECTION_ID = 'after_sales_service';

async function updateSavCollectionStructure() {
  try {
    console.log('üîÑ Mise √† jour de la structure de la collection SAV...');
    
    // 1. Supprimer les attributs li√©s aux techniciens
    const attributesToDelete = [
      'technicianId',
      'technicianName', 
      'isTechnicianList',
      'technicians'
    ];
    
    for (const attribute of attributesToDelete) {
      try {
        await databases.deleteAttribute(DATABASE_ID, COLLECTION_ID, attribute);
        console.log(`‚úÖ Attribut '${attribute}' supprim√© avec succ√®s`);
      } catch (error) {
        if (error.code === 404) {
          console.log(`‚ö†Ô∏è  Attribut '${attribute}' n'existe pas, ignor√©`);
        } else {
          console.error(`‚ùå Erreur lors de la suppression de '${attribute}':`, error.message);
        }
      }
    }
    
    // 2. Ajouter l'attribut user_seller
    try {
      await databases.createStringAttribute(
        DATABASE_ID,
        COLLECTION_ID,
        'user_seller',
        15, // Taille maximale pour user_seller
        false, // Non requis pour permettre la migration
        null, // Pas de valeur par d√©faut
        false // Pas un tableau
      );
      console.log('‚úÖ Attribut user_seller ajout√© avec succ√®s');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚ö†Ô∏è  Attribut user_seller existe d√©j√†');
      } else {
        console.error('‚ùå Erreur lors de l\'ajout de user_seller:', error.message);
      }
    }
    
    console.log('\nüéâ Mise √† jour de la structure termin√©e!');
    console.log('\nüìù Prochaines √©tapes:');
    console.log('1. Ex√©cuter le script de migration des donn√©es existantes');
    console.log('2. Tester la cr√©ation de nouvelles demandes SAV');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cution du script
if (require.main === module) {
  updateSavCollectionStructure();
}

module.exports = { updateSavCollectionStructure };