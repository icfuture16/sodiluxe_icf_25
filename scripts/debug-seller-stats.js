/**
 * Script de d√©bogage pour v√©rifier les statistiques des vendeurs
 * V√©rifie s'il y a des ventes dans la base de donn√©es et les informations des vendeurs
 */

const { Client, Databases, Query } = require('node-appwrite');
require('dotenv').config({ path: require('path').resolve(__dirname, '../.env.local') });
const { DATABASE_ID, PROJECT_ID, ENDPOINT, COLLECTIONS } = require('./appwrite-config');

// Configuration Appwrite
const client = new Client()
  .setEndpoint(ENDPOINT)
  .setProject(PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);

// Fonction pour d√©boguer les statistiques des vendeurs
async function debugSellerStats() {
  try {
    console.log('üîç === D√âBOGAGE DES STATISTIQUES DES VENDEURS ===\n');
    
    // 1. V√©rifier les utilisateurs vendeurs
    console.log('üë• 1. R√©cup√©ration des utilisateurs vendeurs...');
    const usersResponse = await databases.listDocuments(
      DATABASE_ID,
      COLLECTIONS.USERS,
      [Query.equal('role', 'seller')]
    );
    
    console.log(`   ‚úÖ ${usersResponse.documents.length} vendeurs trouv√©s:`);
    usersResponse.documents.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.fullName} (${user.$id}) - ${user.email}`);
    });
    console.log('');
    
    // 2. V√©rifier toutes les ventes
    console.log('üí∞ 2. R√©cup√©ration de toutes les ventes...');
    const allSalesResponse = await databases.listDocuments(
      DATABASE_ID,
      COLLECTIONS.SALES,
      [Query.orderDesc('$createdAt')]
    );
    
    console.log(`   ‚úÖ ${allSalesResponse.documents.length} ventes trouv√©es au total`);
    
    if (allSalesResponse.documents.length === 0) {
      console.log('   ‚ö†Ô∏è  AUCUNE VENTE TROUV√âE - C\'est pourquoi les statistiques sont √† z√©ro!');
      return;
    }
    
    // 3. Analyser les ventes par vendeur
    console.log('\nüìä 3. Analyse des ventes par vendeur...');
    
    const sellerStats = {};
    
    allSalesResponse.documents.forEach(sale => {
      const sellerId = sale.userId;
      const amount = sale.totalAmount || 0;
      const status = sale.status;
      
      if (!sellerStats[sellerId]) {
        sellerStats[sellerId] = {
          totalSales: 0,
          completedSales: 0,
          totalRevenue: 0,
          completedRevenue: 0,
          sales: []
        };
      }
      
      sellerStats[sellerId].totalSales++;
      sellerStats[sellerId].sales.push({
        id: sale.$id,
        amount: amount,
        status: status,
        date: sale.saleDate || sale.$createdAt
      });
      
      if (status === 'completed') {
        sellerStats[sellerId].completedSales++;
        sellerStats[sellerId].completedRevenue += amount;
      }
      
      sellerStats[sellerId].totalRevenue += amount;
    });
    
    // 4. Afficher les statistiques d√©taill√©es
    console.log('\nüìà 4. Statistiques d√©taill√©es par vendeur:');
    
    for (const [sellerId, stats] of Object.entries(sellerStats)) {
      // Trouver le nom du vendeur
      const seller = usersResponse.documents.find(u => u.$id === sellerId);
      const sellerName = seller ? seller.fullName : `Vendeur inconnu (${sellerId})`;
      
      console.log(`\n   üë§ ${sellerName}:`);
      console.log(`      - ID: ${sellerId}`);
      console.log(`      - Ventes totales: ${stats.totalSales}`);
      console.log(`      - Ventes compl√©t√©es: ${stats.completedSales}`);
      console.log(`      - CA total: ${stats.totalRevenue.toLocaleString()} FCFA`);
      console.log(`      - CA compl√©t√©: ${stats.completedRevenue.toLocaleString()} FCFA`);
      
      if (stats.sales.length > 0) {
        console.log(`      - Derni√®res ventes:`);
        stats.sales.slice(0, 3).forEach(sale => {
          console.log(`        * ${sale.id}: ${sale.amount.toLocaleString()} FCFA (${sale.status}) - ${sale.date}`);
        });
      }
    }
    
    // 5. V√©rifier les ventes compl√©t√©es sp√©cifiquement
    console.log('\n‚úÖ 5. V√©rification des ventes compl√©t√©es...');
    const completedSalesResponse = await databases.listDocuments(
      DATABASE_ID,
      COLLECTIONS.SALES,
      [Query.equal('status', 'completed')]
    );
    
    console.log(`   ‚úÖ ${completedSalesResponse.documents.length} ventes compl√©t√©es trouv√©es`);
    
    if (completedSalesResponse.documents.length === 0) {
      console.log('   ‚ö†Ô∏è  AUCUNE VENTE COMPL√âT√âE - Le hook useSellerSales filtre sur status="completed"!');
      console.log('   üí° V√©rifiez que vos ventes ont bien le statut "completed"');
    }
    
    // 6. Tester une requ√™te similaire au hook
    console.log('\nüîß 6. Test d\'une requ√™te similaire au hook useSellerSales...');
    
    if (usersResponse.documents.length > 0) {
      const testSellerId = usersResponse.documents[0].$id;
      const testSellerName = usersResponse.documents[0].fullName;
      
      console.log(`   üß™ Test pour le vendeur: ${testSellerName} (${testSellerId})`);
      
      const testSalesResponse = await databases.listDocuments(
        DATABASE_ID,
        COLLECTIONS.SALES,
        [
          Query.equal('userId', testSellerId),
          Query.equal('status', 'completed'),
          Query.orderDesc('$createdAt')
        ]
      );
      
      console.log(`   üìä R√©sultat: ${testSalesResponse.documents.length} ventes compl√©t√©es trouv√©es`);
      
      if (testSalesResponse.documents.length > 0) {
        const totalRevenue = testSalesResponse.documents.reduce((sum, sale) => sum + (sale.totalAmount || 0), 0);
        console.log(`   üí∞ CA calcul√©: ${totalRevenue.toLocaleString()} FCFA`);
      } else {
        console.log('   ‚ö†Ô∏è  Aucune vente compl√©t√©e pour ce vendeur');
      }
    }
    
    console.log('\nüéØ === R√âSUM√â DU DIAGNOSTIC ===');
    console.log(`- Vendeurs dans la base: ${usersResponse.documents.length}`);
    console.log(`- Ventes totales: ${allSalesResponse.documents.length}`);
    console.log(`- Ventes compl√©t√©es: ${completedSalesResponse.documents.length}`);
    
    if (completedSalesResponse.documents.length === 0) {
      console.log('\n‚ùå PROBL√àME IDENTIFI√â: Aucune vente avec le statut "completed"');
      console.log('üí° SOLUTION: V√©rifiez que vos ventes ont bien le statut "completed" dans la base de donn√©es');
    } else {
      console.log('\n‚úÖ Des ventes compl√©t√©es existent, le probl√®me pourrait √™tre ailleurs');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©bogage:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  debugSellerStats();
}

module.exports = { debugSellerStats };