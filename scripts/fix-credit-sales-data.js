const { Client, Databases, Query } = require('node-appwrite');
require('dotenv').config({ path: require('path').resolve(__dirname, '../.env.local') });
const { DATABASE_ID, PROJECT_ID, ENDPOINT, COLLECTIONS } = require('./appwrite-config');
const readline = require('readline');

// Configuration Appwrite
const client = new Client()
    .setEndpoint(ENDPOINT)
    .setProject(PROJECT_ID)
    .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);

class CreditSalesDataFixer {
    constructor() {
        this.databaseId = DATABASE_ID;
        this.salesCollectionId = COLLECTIONS.SALES;
        
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    async fixCreditSalesData() {
        console.log('üîß Correction des donn√©es des ventes √† cr√©dit...');
        
        try {
            // 1. Identifier les ventes √† cr√©dit avec des donn√©es manquantes
            const problematicSales = await this.findProblematicCreditSales();
            
            if (problematicSales.length === 0) {
                console.log('‚úÖ Aucune vente √† cr√©dit ne n√©cessite de correction.');
                return;
            }
            
            console.log(`\nüìã ${problematicSales.length} ventes √† cr√©dit n√©cessitent des corrections:`);
            problematicSales.forEach((sale, index) => {
                console.log(`   ${index + 1}. Vente ${sale.$id} - ${sale.saleDate} - ${sale.totalAmount}‚Ç¨`);
                console.log(`      Probl√®mes: ${sale.issues.join(', ')}`);
            });
            
            // 2. Demander confirmation pour la correction automatique
            const autoFix = await this.askForAutoFix();
            
            if (autoFix) {
                await this.autoFixCreditSales(problematicSales);
            } else {
                await this.manualFixCreditSales(problematicSales);
            }
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la correction:', error);
            process.exit(1);
        } finally {
            this.rl.close();
        }
    }

    async findProblematicCreditSales() {
        try {
            const creditSales = await databases.listDocuments(
                this.databaseId,
                this.salesCollectionId,
                [
                    Query.equal('isCredit', true),
                    Query.limit(100)
                ]
            );
            
            const problematicSales = [];
            
            for (const sale of creditSales.documents) {
                const issues = [];
                

                
                // V√©rifier la coh√©rence des montants
                const totalAmount = parseFloat(sale.totalAmount || 0);
                const paidAmount = parseFloat(sale.paidAmount || 0);
                const remainingAmount = parseFloat(sale.remainingAmount || 0);
                
                if (Math.abs((paidAmount + remainingAmount) - totalAmount) > 0.01) {
                    issues.push('Incoh√©rence des montants');
                }
                
                // V√©rifier les montants n√©gatifs ou invalides
                if (totalAmount <= 0) {
                    issues.push('Montant total invalide');
                }
                
                if (paidAmount < 0) {
                    issues.push('Montant pay√© n√©gatif');
                }
                
                if (remainingAmount < 0) {
                    issues.push('Montant restant n√©gatif');
                }
                
                if (issues.length > 0) {
                    problematicSales.push({
                        ...sale,
                        issues
                    });
                }
            }
            
            return problematicSales;
        } catch (error) {
            console.error('‚ùå Erreur lors de la recherche des ventes probl√©matiques:', error);
            throw error;
        }
    }

    async askForAutoFix() {
        return new Promise((resolve) => {
            console.log('\nü§ñ Options de correction:');
            console.log('   1. Correction automatique (valeurs par d√©faut)');
            console.log('   2. Correction manuelle (saisie interactive)');
            console.log('\nLa correction automatique appliquera:');
            console.log('   ‚Ä¢ Correction des montants incoh√©rents');
            
            this.rl.question('\nChoisissez (1 pour auto, 2 pour manuel): ', (answer) => {
                resolve(answer.trim() === '1');
            });
        });
    }

    async autoFixCreditSales(problematicSales) {
        console.log('\nü§ñ Correction automatique en cours...');
        
        for (const sale of problematicSales) {
            try {
                const updates = {};
                

                
                // Corriger les montants si n√©cessaire
                const totalAmount = parseFloat(sale.totalAmount || 0);
                const paidAmount = parseFloat(sale.paidAmount || 0);
                let remainingAmount = parseFloat(sale.remainingAmount || 0);
                
                // Recalculer le montant restant si incoh√©rent
                if (Math.abs((paidAmount + remainingAmount) - totalAmount) > 0.01) {
                    remainingAmount = totalAmount - paidAmount;
                    updates.remainingAmount = remainingAmount;
                    console.log(`   üìä Montant restant recalcul√© pour ${sale.$id}: ${remainingAmount}‚Ç¨`);
                }
                
                // Corriger les montants n√©gatifs
                if (remainingAmount < 0) {
                    updates.remainingAmount = 0;
                    updates.paidAmount = totalAmount;
                    console.log(`   üìä Montants corrig√©s pour ${sale.$id}: pay√©=${totalAmount}‚Ç¨, restant=0‚Ç¨`);
                }
                
                // Appliquer les mises √† jour
                if (Object.keys(updates).length > 0) {
                    await databases.updateDocument(
                        this.databaseId,
                        this.salesCollectionId,
                        sale.$id,
                        updates
                    );
                    
                    console.log(`   ‚úÖ Vente ${sale.$id} corrig√©e`);
                }
                
            } catch (error) {
                console.error(`   ‚ùå Erreur lors de la correction de ${sale.$id}:`, error);
            }
        }
        
        console.log('\n‚úÖ Correction automatique termin√©e!');
    }

    async manualFixCreditSales(problematicSales) {
        console.log('\n‚úèÔ∏è  Correction manuelle...');
        
        for (const sale of problematicSales) {
            console.log(`\nüìã Correction de la vente ${sale.$id}:`);
            console.log(`   Date: ${sale.saleDate}`);
            console.log(`   Montant total: ${sale.totalAmount}‚Ç¨`);
            console.log(`   Probl√®mes: ${sale.issues.join(', ')}`);
            
            const updates = {};
            

            
            // Corriger les montants si n√©cessaire
            if (sale.issues.some(issue => issue.includes('montant'))) {
                console.log(`   Montants actuels: Total=${sale.totalAmount}‚Ç¨, Pay√©=${sale.paidAmount}‚Ç¨, Restant=${sale.remainingAmount}‚Ç¨`);
                
                const newPaidAmount = await this.askQuestion(`Montant pay√© (actuel: ${sale.paidAmount}‚Ç¨): `);
                if (newPaidAmount.trim() && !isNaN(parseFloat(newPaidAmount))) {
                    const paidAmount = parseFloat(newPaidAmount);
                    const totalAmount = parseFloat(sale.totalAmount);
                    updates.paidAmount = paidAmount;
                    updates.remainingAmount = totalAmount - paidAmount;
                }
            }
            
            // Appliquer les mises √† jour
            if (Object.keys(updates).length > 0) {
                try {
                    await databases.updateDocument(
                        this.databaseId,
                        this.salesCollectionId,
                        sale.$id,
                        updates
                    );
                    console.log(`   ‚úÖ Vente ${sale.$id} mise √† jour`);
                } catch (error) {
                    console.error(`   ‚ùå Erreur lors de la mise √† jour:`, error);
                }
            } else {
                console.log(`   ‚è≠Ô∏è  Vente ${sale.$id} ignor√©e`);
            }
        }
        
        console.log('\n‚úÖ Correction manuelle termin√©e!');
    }

    async askQuestion(question) {
        return new Promise((resolve) => {
            this.rl.question(question, (answer) => {
                resolve(answer);
            });
        });
    }
}

// Ex√©cution du script
if (require.main === module) {
    const fixer = new CreditSalesDataFixer();
    fixer.fixCreditSalesData()
        .then(() => {
            console.log('\nüéâ Correction des donn√©es termin√©e!');
            console.log('\nüìã PROCHAINES √âTAPES:');
            console.log('   1. Relancer la validation: node scripts/validate-migration.js');
            console.log('   2. Si validation OK: node scripts/cleanup-old-collections.js');
        })
        .catch(error => {
            console.error('‚ùå Erreur lors de la correction:', error);
            process.exit(1);
        });
}

module.exports = CreditSalesDataFixer;

