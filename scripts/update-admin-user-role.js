/**
 * Script pour mettre √† jour le r√¥le de l'utilisateur admin dans la collection users
 */

require('dotenv').config({ path: require('path').resolve(__dirname, '../.env.local') });
const { Client, Databases } = require('node-appwrite');
const config = require('./appwrite-config');

// Configuration Appwrite
const client = new Client()
  .setEndpoint(config.ENDPOINT)
  .setProject(config.PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);

async function updateAdminUserRole() {
  try {
    console.log('üîç Recherche de l\'utilisateur admin dans la collection users...');
    
    const adminUserId = '6897a51f000609b185da'; // ID de l'utilisateur admin
    const adminEmail = 'admin@sodiluxe.com';
    
    // V√©rifier si le profil utilisateur existe
    try {
      const userProfile = await databases.getDocument(
        config.DATABASE_ID,
        config.COLLECTIONS.USERS,
        adminUserId
      );
      
      console.log('‚úÖ Profil utilisateur trouv√©:', {
        id: userProfile.$id,
        email: userProfile.email,
        fullName: userProfile.fullName,
        role: userProfile.role,
        storeId: userProfile.storeId,
        user_seller: userProfile.user_seller
      });
      
      // V√©rifier si le r√¥le est d√©j√† admin
      if (userProfile.role === 'admin') {
        console.log('‚úÖ L\'utilisateur a d√©j√† le r√¥le admin!');
        return;
      }
      
      // Mettre √† jour le r√¥le vers admin
      console.log('üîÑ Mise √† jour du r√¥le vers "admin"...');
      const updatedProfile = await databases.updateDocument(
        config.DATABASE_ID,
        config.COLLECTIONS.USERS,
        adminUserId,
        {
          role: 'admin'
        }
      );
      
      console.log('‚úÖ R√¥le mis √† jour avec succ√®s!');
      console.log('üìã Profil mis √† jour:', {
        id: updatedProfile.$id,
        email: updatedProfile.email,
        fullName: updatedProfile.fullName,
        role: updatedProfile.role,
        storeId: updatedProfile.storeId,
        user_seller: updatedProfile.user_seller
      });
      
    } catch (profileError) {
      if (profileError.code === 404) {
        console.log('‚ùå Profil utilisateur non trouv√© dans la collection users.');
        console.log('üîß Cr√©ation du profil utilisateur admin...');
        
        // Cr√©er le profil utilisateur admin
        const newProfile = await databases.createDocument(
          config.DATABASE_ID,
          config.COLLECTIONS.USERS,
          adminUserId,
          {
            email: adminEmail,
            fullName: 'Admin Sodiluxe',
            role: 'admin',
            storeId: '', // Pas de magasin sp√©cifique pour l'admin
            user_seller: 'ADMIN' // Identifiant vendeur pour l'admin
          }
        );
        
        console.log('‚úÖ Profil utilisateur admin cr√©√©!');
        console.log('üìã Nouveau profil:', {
          id: newProfile.$id,
          email: newProfile.email,
          fullName: newProfile.fullName,
          role: newProfile.role,
          storeId: newProfile.storeId,
          user_seller: newProfile.user_seller
        });
      } else {
        throw profileError;
      }
    }
    
    console.log('\nüéâ Configuration termin√©e!');
    console.log('üí° L\'utilisateur admin devrait maintenant avoir isAdmin = true');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour du r√¥le admin:', error);
    process.exit(1);
  }
}

// V√©rifier les variables d'environnement
if (!process.env.APPWRITE_API_KEY) {
  console.error('‚ùå Variable d\'environnement APPWRITE_API_KEY manquante.');
  process.exit(1);
}

console.log('üöÄ Mise √† jour du r√¥le utilisateur admin...');
console.log('üì° Endpoint:', config.ENDPOINT);
console.log('üÜî Project ID:', config.PROJECT_ID);
console.log('üóÑÔ∏è Database ID:', config.DATABASE_ID);
console.log('üìÅ Collection Users:', config.COLLECTIONS.USERS);

updateAdminUserRole();