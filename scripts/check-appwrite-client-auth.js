/**
 * Script pour v√©rifier l'authentification client-side avec Appwrite
 * Ce script simule le comportement du client dans le navigateur
 */

require('dotenv').config({ path: require('path').resolve(__dirname, '../.env.local') });
const { Client, Account } = require('node-appwrite');

// V√©rification des variables d'environnement requises
if (!process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT || !process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID) {
  console.error('Erreur: Variables d\'environnement manquantes.');
  console.error('Veuillez d√©finir NEXT_PUBLIC_APPWRITE_ENDPOINT et NEXT_PUBLIC_APPWRITE_PROJECT_ID dans le fichier .env.local');
  process.exit(1);
}

// Configuration Appwrite (client-side, sans cl√© API)
const client = new Client();

client
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID);

// Ajouter l'en-t√™te Origin pour simuler le comportement du navigateur
if (process.env.NEXT_PUBLIC_APPWRITE_HOSTNAME) {
  console.log(`Ajout de l'en-t√™te Origin: ${process.env.NEXT_PUBLIC_APPWRITE_HOSTNAME}`);
  client.headers['Origin'] = process.env.NEXT_PUBLIC_APPWRITE_HOSTNAME;
}

const account = new Account(client);

// Fonction principale
async function checkClientAuth() {
  try {
    console.log('V√©rification de la connexion client √† Appwrite...');
    console.log(`Endpoint: ${process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT}`);
    console.log(`Project ID: ${process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID}`);
    
    // Tester une requ√™te anonyme (qui ne n√©cessite pas d'authentification)
    try {
      console.log('\nTest de requ√™te anonyme: V√©rification du statut de la session...');
      const session = await account.getSession('current');
      console.log('‚úÖ Requ√™te r√©ussie (session trouv√©e):', session);
    } catch (error) {
      if (error.code === 401) {
        console.log('‚úÖ Requ√™te anonyme r√©ussie (aucune session active, ce qui est normal)');
      } else {
        console.error(`‚ùå Erreur lors de la requ√™te anonyme:`, error);
        console.log('Code d\'erreur:', error.code);
        console.log('Type d\'erreur:', error.type);
        console.log('Message d\'erreur:', error.message);
        
        if (error.code === 400) {
          console.log('\nüîç Analyse de l\'erreur 400:');
          console.log('Cette erreur peut √™tre caus√©e par:');
          console.log('1. Un probl√®me de CORS - V√©rifiez que votre domaine est bien configur√© dans la console Appwrite');
          console.log('2. Un probl√®me de configuration du client - V√©rifiez les variables d\'environnement');
          console.log('3. Un probl√®me de r√©seau - V√©rifiez votre connexion Internet');
        }
      }
    }

    console.log('\nüìã √âtapes de d√©pannage:');
    console.log('1. V√©rifiez que les plateformes sont configur√©es dans la console Appwrite:');
    console.log(`   - ${process.env.NEXT_PUBLIC_APPWRITE_HOSTNAME}`);
    console.log('2. V√©rifiez que le PROJECT_ID est correct');
    console.log('3. Essayez de vider le cache du navigateur et les cookies');
    console.log('4. V√©rifiez les erreurs dans la console du navigateur');
    
  } catch (error) {
    console.error('Erreur g√©n√©rale:', error);
    process.exit(1);
  }
}

// Ex√©cuter la fonction principale
checkClientAuth();