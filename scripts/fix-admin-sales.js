/**
 * Script de correction pour r√©parer les ventes avec 'ADMIN' comme sellerId/userId
 * Utilise les r√©sultats du diagnostic pour corriger automatiquement les donn√©es
 */

const { Client, Databases, Query } = require('node-appwrite');
const fs = require('fs');
const path = require('path');
const readline = require('readline');
require('dotenv').config({ path: path.resolve(__dirname, '../.env.local') });
const config = require('./appwrite-config');

// Configuration Appwrite
const client = new Client()
    .setEndpoint(config.ENDPOINT)
    .setProject(config.PROJECT_ID)
    .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = config.DATABASE_ID;
const SALES_COLLECTION_ID = config.COLLECTIONS.SALES;
const USERS_COLLECTION_ID = config.COLLECTIONS.USERS;

// Interface pour les questions utilisateur
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, resolve);
    });
}

async function fixAdminSales() {
    console.log('üîß Script de correction des ventes avec ADMIN comme sellerId/userId...');
    
    try {
        // 1. Charger le rapport de diagnostic s'il existe
        const reportPath = path.join(__dirname, 'admin-sales-diagnostic-report.json');
        let diagnosticReport = null;
        
        if (fs.existsSync(reportPath)) {
            console.log('üìã Chargement du rapport de diagnostic...');
            diagnosticReport = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            console.log(`Trouv√© ${diagnosticReport.summary.totalProblematicSales} vente(s) probl√©matique(s)`);
        } else {
            console.log('‚ö†Ô∏è  Aucun rapport de diagnostic trouv√©. Ex√©cutez d\'abord diagnose-admin-sales.js');
            return;
        }
        
        if (diagnosticReport.summary.totalProblematicSales === 0) {
            console.log('‚úÖ Aucune vente probl√©matique √† corriger!');
            return;
        }
        
        // 2. R√©cup√©rer les utilisateurs disponibles
        console.log('\nüë• R√©cup√©ration des utilisateurs disponibles...');
        const users = await databases.listDocuments(
            DATABASE_ID,
            USERS_COLLECTION_ID,
            [Query.limit(100)]
        );
        
        console.log('\nüìä Utilisateurs disponibles:');
        users.documents.forEach((user, index) => {
            console.log(`${index + 1}. ID: ${user.$id} | Nom: ${user.name || 'N/A'} | Email: ${user.email || 'N/A'}`);
        });
        
        // 3. Options de correction
        console.log('\nüîß OPTIONS DE CORRECTION:');
        console.log('1. Correction automatique (assigner √† un utilisateur par d√©faut)');
        console.log('2. Correction manuelle (choisir pour chaque vente)');
        console.log('3. Supprimer les ventes probl√©matiques');
        console.log('4. Annuler');
        
        const choice = await askQuestion('\nChoisissez une option (1-4): ');
        
        switch (choice) {
            case '1':
                await automaticFix(diagnosticReport, users.documents);
                break;
            case '2':
                await manualFix(diagnosticReport, users.documents);
                break;
            case '3':
                await deleteSales(diagnosticReport);
                break;
            case '4':
                console.log('‚ùå Op√©ration annul√©e.');
                break;
            default:
                console.log('‚ùå Option invalide.');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la correction:', error.message);
    } finally {
        rl.close();
    }
}

async function automaticFix(report, users) {
    console.log('\nü§ñ CORRECTION AUTOMATIQUE');
    
    if (users.length === 0) {
        console.log('‚ùå Aucun utilisateur disponible pour la correction.');
        return;
    }
    
    // Choisir un utilisateur par d√©faut
    console.log('\nUtilisateurs disponibles:');
    users.forEach((user, index) => {
        console.log(`${index + 1}. ${user.name || user.email || user.$id}`);
    });
    
    const userChoice = await askQuestion('Choisissez l\'utilisateur par d√©faut (num√©ro): ');
    const selectedUser = users[parseInt(userChoice) - 1];
    
    if (!selectedUser) {
        console.log('‚ùå Utilisateur invalide.');
        return;
    }
    
    console.log(`\n‚úÖ Utilisateur s√©lectionn√©: ${selectedUser.name || selectedUser.email} (${selectedUser.$id})`);
    
    const confirm = await askQuestion('Confirmer la correction automatique? (y/N): ');
    if (confirm.toLowerCase() !== 'y') {
        console.log('‚ùå Correction annul√©e.');
        return;
    }
    
    // Corriger toutes les ventes
    let corrected = 0;
    let errors = 0;
    
    for (const sale of report.problematicSales) {
        try {
            await databases.updateDocument(
                DATABASE_ID,
                SALES_COLLECTION_ID,
                sale.id,
                {
                    sellerId: selectedUser.$id,
                    userId: selectedUser.$id,
                    user_seller: selectedUser.name || selectedUser.email || 'Utilisateur Corrig√©'
                }
            );
            
            console.log(`‚úÖ Vente ${sale.id} corrig√©e`);
            corrected++;
        } catch (error) {
            console.log(`‚ùå Erreur pour la vente ${sale.id}: ${error.message}`);
            errors++;
        }
    }
    
    console.log(`\nüìä R√âSULTATS:`);
    console.log(`‚úÖ Ventes corrig√©es: ${corrected}`);
    console.log(`‚ùå Erreurs: ${errors}`);
}

async function manualFix(report, users) {
    console.log('\nüë§ CORRECTION MANUELLE');
    
    let corrected = 0;
    let skipped = 0;
    
    for (const sale of report.problematicSales) {
        console.log('\n' + '='.repeat(60));
        console.log(`VENTE: ${sale.id}`);
        console.log(`Probl√®me: ${sale.issue}`);
        console.log(`Date: ${sale.createdAt}`);
        console.log(`Magasin: ${sale.store || 'N/A'}`);
        console.log(`Montant: ${sale.total || 'N/A'}`);
        console.log('='.repeat(60));
        
        console.log('\nUtilisateurs disponibles:');
        users.forEach((user, index) => {
            console.log(`${index + 1}. ${user.name || user.email || user.$id}`);
        });
        console.log('0. Ignorer cette vente');
        
        const choice = await askQuestion('Choisissez un utilisateur (0 pour ignorer): ');
        
        if (choice === '0') {
            console.log('‚è≠Ô∏è  Vente ignor√©e');
            skipped++;
            continue;
        }
        
        const selectedUser = users[parseInt(choice) - 1];
        if (!selectedUser) {
            console.log('‚ùå Choix invalide, vente ignor√©e');
            skipped++;
            continue;
        }
        
        try {
            await databases.updateDocument(
                DATABASE_ID,
                SALES_COLLECTION_ID,
                sale.id,
                {
                    sellerId: selectedUser.$id,
                    userId: selectedUser.$id,
                    user_seller: selectedUser.name || selectedUser.email || 'Utilisateur Corrig√©'
                }
            );
            
            console.log(`‚úÖ Vente corrig√©e avec l'utilisateur: ${selectedUser.name || selectedUser.email}`);
            corrected++;
        } catch (error) {
            console.log(`‚ùå Erreur lors de la correction: ${error.message}`);
        }
    }
    
    console.log(`\nüìä R√âSULTATS:`);
    console.log(`‚úÖ Ventes corrig√©es: ${corrected}`);
    console.log(`‚è≠Ô∏è  Ventes ignor√©es: ${skipped}`);
}

async function deleteSales(report) {
    console.log('\nüóëÔ∏è  SUPPRESSION DES VENTES PROBL√âMATIQUES');
    console.log(`‚ö†Ô∏è  ATTENTION: Cette action supprimera d√©finitivement ${report.summary.totalProblematicSales} vente(s)!`);
    
    const confirm1 = await askQuestion('√ätes-vous s√ªr de vouloir supprimer ces ventes? (y/N): ');
    if (confirm1.toLowerCase() !== 'y') {
        console.log('‚ùå Suppression annul√©e.');
        return;
    }
    
    const confirm2 = await askQuestion('Tapez "SUPPRIMER" pour confirmer: ');
    if (confirm2 !== 'SUPPRIMER') {
        console.log('‚ùå Suppression annul√©e.');
        return;
    }
    
    let deleted = 0;
    let errors = 0;
    
    for (const sale of report.problematicSales) {
        try {
            await databases.deleteDocument(
                DATABASE_ID,
                SALES_COLLECTION_ID,
                sale.id
            );
            
            console.log(`üóëÔ∏è  Vente ${sale.id} supprim√©e`);
            deleted++;
        } catch (error) {
            console.log(`‚ùå Erreur pour la vente ${sale.id}: ${error.message}`);
            errors++;
        }
    }
    
    console.log(`\nüìä R√âSULTATS:`);
    console.log(`üóëÔ∏è  Ventes supprim√©es: ${deleted}`);
    console.log(`‚ùå Erreurs: ${errors}`);
}

// Ex√©cuter le script de correction
if (require.main === module) {
    fixAdminSales().catch(console.error);
}

module.exports = { fixAdminSales };