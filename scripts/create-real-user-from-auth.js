const { Client, Databases, Users } = require('node-appwrite');
const config = require('./appwrite-config');

// Configuration Appwrite
const client = new Client()
  .setEndpoint(config.ENDPOINT)
  .setProject(config.PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const users = new Users(client);
const DATABASE_ID = config.DATABASE_ID;
const USERS_COLLECTION_ID = config.COLLECTIONS.USERS;

// Fonction pour g√©n√©rer un user_seller (max 15 caract√®res)
function generateUserSeller(fullName) {
  if (!fullName || typeof fullName !== 'string') {
    return 'UNKNOWN'
  }

  // Nettoyer le nom : supprimer les accents, espaces multiples, caract√®res sp√©ciaux
  const cleanName = fullName
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Supprimer les accents
    .replace(/[^a-zA-Z0-9\s]/g, '') // Garder seulement lettres, chiffres et espaces
    .replace(/\s+/g, ' ') // Remplacer espaces multiples par un seul
    .trim()
    .toUpperCase()

  if (!cleanName) {
    return 'UNKNOWN'
  }

  // Strat√©gies de g√©n√©ration selon la longueur et le format du nom
  const words = cleanName.split(' ').filter(word => word.length > 0)
  
  if (words.length === 0) {
    return 'UNKNOWN'
  }
  
  // Si un seul mot
  if (words.length === 1) {
    return words[0].substring(0, 15)
  }
  
  // Si deux mots (pr√©nom + nom)
  if (words.length === 2) {
    const [firstName, lastName] = words
    
    // Essayer pr√©nom complet + initiale du nom
    if (firstName.length + 1 <= 15) {
      const result = firstName + lastName.charAt(0)
      if (result.length <= 15) {
        return result
      }
    }
    
    // Essayer initiale pr√©nom + nom complet
    if (lastName.length + 1 <= 15) {
      const result = firstName.charAt(0) + lastName
      if (result.length <= 15) {
        return result
      }
    }
    
    // Essayer les 7 premiers caract√®res de chaque mot
    const result = firstName.substring(0, 7) + lastName.substring(0, 7)
    if (result.length <= 15) {
      return result
    }
    
    // Fallback : concat√©ner et tronquer
    return (firstName + lastName).substring(0, 15)
  }
  
  // Si plus de deux mots, prendre les initiales + premiers mots
  if (words.length >= 3) {
    const firstName = words[0]
    const lastNames = words.slice(1)
    
    // Essayer pr√©nom + initiales des noms
    const initials = lastNames.map(word => word.charAt(0)).join('')
    if (firstName.length + initials.length <= 15) {
      return firstName + initials
    }
    
    // Fallback : prendre les initiales de tous les mots
    const allInitials = words.map(word => word.charAt(0)).join('')
    if (allInitials.length <= 15) {
      return allInitials
    }
    
    // Dernier fallback : tronquer √† 15 caract√®res
    return words.join('').substring(0, 15)
  }
  
  return 'UNKNOWN'
}

async function createRealUserFromAuth() {
  const userId = '688987f7003216df6426';
  
  try {
    console.log('üîç R√©cup√©ration des informations de l\'utilisateur authentifi√©:', userId);
    
    // V√©rifier si l'utilisateur existe d√©j√† dans la collection users
    let existingUser = null;
    try {
      existingUser = await databases.getDocument(
        DATABASE_ID,
        USERS_COLLECTION_ID,
        userId
      );
      console.log('‚úÖ L\'utilisateur existe d√©j√† dans la collection users:', existingUser.fullName);
      console.log('üìã user_seller actuel:', existingUser.user_seller || 'Non d√©fini');
      
      // Si user_seller n'est pas d√©fini, on va le mettre √† jour
      if (!existingUser.user_seller) {
        console.log('üîÑ Mise √† jour n√©cessaire pour ajouter user_seller...');
      } else {
        console.log('‚úÖ user_seller d√©j√† d√©fini, aucune action n√©cessaire.');
        return;
      }
    } catch (error) {
      if (error.code !== 404) {
        throw error;
      }
      console.log('‚ùå Utilisateur non trouv√© dans la collection users, r√©cup√©ration depuis l\'authentification...');
    }

    // R√©cup√©rer les informations de l'utilisateur depuis l'API Users
    let authUser;
    try {
      authUser = await users.get(userId);
      console.log('‚úÖ Utilisateur trouv√© dans l\'authentification:', {
        id: authUser.$id,
        name: authUser.name,
        email: authUser.email,
        status: authUser.status
      });
    } catch (authError) {
      console.error('‚ùå Impossible de r√©cup√©rer l\'utilisateur depuis l\'authentification:', authError.message);
      
      // Si l'utilisateur existe dans la collection mais pas dans l'auth, utiliser les donn√©es existantes
      if (existingUser) {
        console.log('üí° Utilisation des donn√©es existantes de la collection...');
        authUser = {
          $id: userId,
          name: existingUser.fullName,
          email: existingUser.email,
          status: true
        };
      } else {
        console.log('üí° Cr√©ation d\'un utilisateur avec des donn√©es par d√©faut...');
        authUser = {
          $id: userId,
          name: 'Utilisateur Inconnu',
          email: `user${userId.substring(0, 8)}@sodiluxe.com`,
          status: true
        };
      }
    }

    // G√©n√©rer le user_seller
    const userSeller = generateUserSeller(authUser.name);
    console.log(`üìù user_seller g√©n√©r√©: '${userSeller}' (${userSeller.length} caract√®res)`);

    let resultUser;
    
    if (existingUser) {
      // Mettre √† jour l'utilisateur existant
      console.log('üîÑ Mise √† jour de l\'utilisateur existant...');
      
      const updateData = {
        user_seller: userSeller
      };
      
      // Mettre √† jour aussi le fullName si on a de meilleures donn√©es depuis l'auth
      if (authUser.name !== existingUser.fullName && authUser.name !== 'Utilisateur Inconnu') {
        updateData.fullName = authUser.name;
        console.log(`üìù Mise √† jour du nom: '${existingUser.fullName}' ‚Üí '${authUser.name}'`);
      }
      
      resultUser = await databases.updateDocument(
        DATABASE_ID,
        USERS_COLLECTION_ID,
        userId,
        updateData
      );
      
      console.log('‚úÖ Utilisateur mis √† jour avec succ√®s!');
    } else {
      // Cr√©er un nouvel utilisateur
      console.log('üìù Cr√©ation d\'un nouvel utilisateur...');
      
      const userData = {
        email: authUser.email,
        fullName: authUser.name,
        role: 'seller',
        storeId: '6859971b0030b8c47c17', // ID du magasin par d√©faut
        user_seller: userSeller
      };

      resultUser = await databases.createDocument(
        DATABASE_ID,
        USERS_COLLECTION_ID,
        userId, // Utiliser le m√™me ID que l'authentification
        userData
      );
      
      console.log('‚úÖ Utilisateur cr√©√© avec succ√®s!');
    }

    console.log('üìã D√©tails finaux:', {
      id: resultUser.$id,
      fullName: resultUser.fullName,
      email: resultUser.email,
      role: resultUser.role,
      storeId: resultUser.storeId,
      user_seller: resultUser.user_seller
    });

    console.log('\n‚úÖ Validation:');
    console.log(`   - user_seller: '${resultUser.user_seller}' (${resultUser.user_seller.length} caract√®res)`);
    console.log(`   - Conforme √† la limite de 15 caract√®res: ${resultUser.user_seller.length <= 15 ? '‚úÖ' : '‚ùå'}`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la gestion de l\'utilisateur:', error.message);
    if (error.response) {
      console.error('üìã D√©tails de l\'erreur:', error.response);
    }
    process.exit(1);
  }
}

// Ex√©cuter le script
createRealUserFromAuth();

